--Najprościej chyba dodać
--export PATH := $(PATH):/home/students/inf/PUBLIC/MRJP/Stack
--na początku Makefile.

-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [Stmt] ;  --DONE

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;  --DONE

separator  Stmt "" ;

Empty.     Stmt ::= ";" ; --DONE

BStmt.     Stmt ::= Block ;  --DONE

Decl.      Stmt ::= Type [Item] ";" ; -- ZMIENIA ENV GNIDA JEDNA  --DONE

DefaultInit.    Item ::= Ident ; -- TODO: FUNCTIONS DON'T HAVE DEFAULT, NOT ALLOWED -- ZMIENIA ENV GNIDA JEDNA  --DONEsome

Init.      Item ::= Ident "=" Expr ; -- ZMIENIA ENV GNIDA JEDNA  --DONE

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;  --DONE

Incr.      Stmt ::= Ident "++"  ";" ;

Decr.      Stmt ::= Ident "--"  ";" ;

Ret.       Stmt ::= "return" Expr ";" ; --DONE

VRet.      Stmt ::= "return" ";" ; --DONE

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ; --DONE

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ; --DONE

While.     Stmt ::= "while" "(" Expr ")" Stmt ;  --DONE

Break.      Stmt ::= "break" ";" ;

Continue.      Stmt ::= "continue" ";" ;

SPrint.      Stmt ::= "print" "(" Expr ")" ";" ; -- ONLY Expr OF TYPE INT, BOOL AND STRING  --DONE kinda chyba? 
-- zrobienie 1arg funkcji o nazwie print jest głupie XD nigdy jej nie wywoła

SExp.      Stmt ::= Expr  ";" ; --DONE

FnDef.	   Stmt ::= Type Ident "(" [Arg] ")" Block ; -- ZMIENIA ENV GNIDA JEDNA --DONE

Arg. 	   Arg ::= Type Ident; --DONE

RefArg.	   Arg ::= Type "&" Ident; -- IN FUNCTION DEFINITIONS ONLY (calls must provide a variable, not a primitive)

separator  Arg "," ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ; --DONE

Str.       Type ::= "string" ; --DONE

Bool.      Type ::= "bool" ; --DONE

Void.      Type ::= "void" ; --DONE

Fun.       Type ::= "<""(" [Type] ")" ":" Type ">"; --DONE

separator  Type "," ;

-- Expressions ---------------------------------------------

ELambda.   Expr6 ::= "(" [Arg] ")" ":" Type "->" Block ;

EVar.      Expr6 ::= Ident ;--DONE

ELitInt.   Expr6 ::= Integer ; --DONE

ELitTrue.  Expr6 ::= "true" ; --DONE --FIXME: print to lowerCase

ELitFalse. Expr6 ::= "false" ; --DONE --FIXME: print to lowerCase

EApp.      Expr6 ::= Ident "(" [Expr] ")" ; --DONE --TODO: & arguments!

EString.   Expr6 ::= String ; --DONE

Neg.       Expr5 ::= "-" Expr6 ; --DONE -- FIXME: int only!

Not.       Expr5 ::= "!" Expr6 ; --DONE -- FIXME: bool only!

EMul.      Expr4 ::= Expr4 MulOp Expr5 ; --DONE

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ; --DONE

ERel.      Expr2 ::= Expr2 RelOp Expr3 ; --DONE

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ; --DONE -- FIXME: bool only!

EOr.       Expr ::= Expr1 "||" Expr ; --DONE -- FIXME: bool only!

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------
--DONE
Plus.      AddOp ::= "+" ; -- TODO:FIXME: dodawanie stringów umożliwić!!!

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------
--DONE
comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

