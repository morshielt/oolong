--Najprościej chyba dodać
--export PATH := $(PATH):/home/students/inf/PUBLIC/MRJP/Stack
--na początku Makefile.

-- programs ------------------------------------------------

entrypoints Program ;

Program.   Program ::= [Stmt] ;    

-- statements ----------------------------------------------

Block.     Block ::= "{" [Stmt] "}" ;    --DONE

separator  Stmt "" ;

Empty.     Stmt ::= ";" ;    --DONE

BStmt.     Stmt ::= Block ;    --DONE

Decl.      Stmt ::= Type [Item] ";" ; --DONE

DefaultInit.    Item ::= Ident ; --DONE

Init.      Item ::= Ident "=" Expr ; --DONE

separator nonempty Item "," ;

Ass.       Stmt ::= Ident "=" Expr  ";" ;    --DONE

Incr.      Stmt ::= Ident "++"  ";" ;  --DONE

Decr.      Stmt ::= Ident "--"  ";" ;  --DONE

Ret.       Stmt ::= "return" Expr ";" ;    --DONE

VRet.      Stmt ::= "return" ";" ;    --DONE

Cond.      Stmt ::= "if" "(" Expr ")" Stmt  ;    --DONE

CondElse.  Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;    --DONE

While.     Stmt ::= "while" "(" Expr ")" Stmt ;     --DONE

Break.      Stmt ::= "break" ";" ; -- TODO

Continue.      Stmt ::= "continue" ";" ; -- TODO

SPrint.      Stmt ::= "print" "(" Expr ")" ";" ; --DONE -- ONLY Expr OF TYPE INT, BOOL AND STRING     kinda chyba? 
-- zrobienie 1arg funkcji o nazwie print jest głupie XD nigdy jej nie wywoła

SExp.      Stmt ::= Expr  ";" ; --DONE

FnDef.	   Stmt ::= Type Ident "(" [Arg] ")" Block ;  --DONE -- ZMIENIA ENV GNIDA JEDNA   

Arg. 	   Arg ::= Type Ident;    --DONE

RefArg.	   Arg ::= Type "&" Ident;   --DONE  -- IN FUNCTION DEFINITIONS ONLY (calls must provide a variable, not a primitive)

separator  Arg "," ;

-- Types ---------------------------------------------------

Int.       Type ::= "int" ;   

Str.       Type ::= "string" ;   

Bool.      Type ::= "bool" ;   

Void.      Type ::= "void" ;   

Fun.       Type ::= "<""(" [Type] ")" ":" Type ">";   

separator  Type "," ;

-- Expressions ---------------------------------------------

ELambda.   Expr6 ::= "(" [Arg] ")" ":" Type "->" Block ;   

EVar.      Expr6 ::= Ident ; --DONE

ELitInt.   Expr6 ::= Integer ;   --DONE

ELitTrue.  Expr6 ::= "true" ; --DONE

ELitFalse. Expr6 ::= "false" ; --DONE

EApp.      Expr6 ::= Ident "(" [Expr] ")" ; --DONE   --FIXME: change VFun type and redo

EString.   Expr6 ::= String ;   --DONE

Neg.       Expr5 ::= "-" Expr6 ;   --DONE

Not.       Expr5 ::= "!" Expr6 ;    --DONE

EMul.      Expr4 ::= Expr4 MulOp Expr5 ;   --DONE

EAdd.      Expr3 ::= Expr3 AddOp Expr4 ;   --DONE

ERel.      Expr2 ::= Expr2 RelOp Expr3 ; --DONE

EAnd.      Expr1 ::= Expr2 "&&" Expr1 ; --DONE

EOr.       Expr ::= Expr1 "||" Expr ; --DONE

coercions  Expr 6 ;

separator  Expr "," ;

-- operators -----------------------------------------------
  
Plus.      AddOp ::= "+" ;

Minus.     AddOp ::= "-" ;

Times.     MulOp ::= "*" ;

Div.       MulOp ::= "/" ;

Mod.       MulOp ::= "%" ;

LTH.       RelOp ::= "<" ;

LE.        RelOp ::= "<=" ;

GTH.       RelOp ::= ">" ;

GE.        RelOp ::= ">=" ;

EQU.       RelOp ::= "==" ;

NE.        RelOp ::= "!=" ;

-- comments ------------------------------------------------
  
comment    "#" ;

comment    "//" ;

comment    "/*" "*/" ;

